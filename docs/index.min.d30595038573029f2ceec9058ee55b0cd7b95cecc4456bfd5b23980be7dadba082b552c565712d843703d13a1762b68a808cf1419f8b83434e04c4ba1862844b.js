var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/getting-started/introduction/",title:"Introduction",description:"Githaxs is a CI as a Service platform.",content:'\u003ch2 id="get-started"\u003eGet started\u003c/h2\u003e\n\u003cp\u003eGithaxs provides two different GitHub Applications: Githaxs Workflow and Githaxs.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/apps/githaxs-workflow"\u003eGithaxs Workflow\u003c/a\u003e application \u003cstrong\u003edoes not\u003c/strong\u003e have access to your application source code. It performs tasks based on Meta data (i.e. checking Pull Request Title, size of PR, etc) and helps you enforce standardized workflows across your entire engineering organization.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/apps/githaxs"\u003eGithaxs\u003c/a\u003e application \u003cstrong\u003edoes\u003c/strong\u003e have access to your application source code. It performs tasks such as linting and static analysis. You can centrally configure settings for all of your Repos.\u003c/p\u003e\n\u003ch3 id="install-application"\u003eInstall Application\u003c/h3\u003e\n\u003cp\u003eInstalling either Githaxs application is done with a few clicks of a button.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the GitHub application page for \u003ca href="https://github.com/apps/githaxs"\u003eGithaxs\u003c/a\u003e or \u003ca href="https://github.com/apps/githaxs-workflow"\u003eGithaxs Workflow\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eClick on \u003ccode\u003eInstall\u003c/code\u003e or \u003ccode\u003eConfigure\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSelect the GitHub Organization you want to install the application on.\u003c/li\u003e\n\u003cli\u003eSelect either \u003ccode\u003eAll repositories\u003c/code\u003e or \u003ccode\u003eOnly select repositories\u003c/code\u003e; if the latter select which repositories you wish to install the application on.\n\u003cul\u003e\n\u003cli\u003eNote both Githaxs applications are configured from a repository named \u003ccode\u003egithaxs_settings\u003c/code\u003e within your organization. If you are installing the applications on select repositories ensure to create the \u003ccode\u003egithaxs_settings\u003c/code\u003e repo and ensure it is in the list of repos you select for installation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003eInstall\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:1,href:"/docs/getting-started/configuration/",title:"Configuration",description:"Githaxs | Configuration",content:'\u003cp\u003eBoth Githaxs applications are configured from a repo named \u003ccode\u003egithaxs_settings\u003c/code\u003e with a file named \u003ccode\u003eghx.yml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003eðŸ‘‰\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eConfigurations are read from githaxs_setting/ghx.yml.\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eAfter you install the Githaxs Applications in your GitHub Organization, you can start configuring tasks to run on your repositories. A task can be configured to run on a repo in multiple different ways providing you maximum flexibility and convenience.\u003c/p\u003e\n\u003ch5 id="org"\u003eOrg\u003c/h5\u003e\n\u003cp\u003eSetting this key to true will enable a task to run on every repository you installed the GitHub Application on in the \u003ca href="/docs/getting-started/introduction/#install-application"\u003eGetting Started\u003c/a\u003e steps.\u003c/p\u003e\n\u003ch5 id="repos"\u003eRepos\u003c/h5\u003e\n\u003cp\u003eUsing this key allows you to specify specific repositories to run a task on. The GitHub Application must also be installed on the same repositories.\u003c/p\u003e\n\u003ch5 id="repo-languages"\u003eRepo Languages\u003c/h5\u003e\n\u003cp\u003e\u003ca href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-repository-languages"\u003eGitHub\u003c/a\u003e uses the open source Linguist Library to determine which languages exist in your repository. You can use this key to run a task on repos that contain code with a specific language. For example, if you want to run \u003ca href="/docs/tasks/cq/prettier"\u003ePrettier\u003c/a\u003e on all repositories that contain JavaScript.\u003c/p\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003eðŸ‘‰\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eTasks will not run unless code using the language has already been committed to the repo.\u003c/div\u003e\n\u003c/div\u003e\n\u003ch5 id="repo-topics"\u003eRepo Topics\u003c/h5\u003e\n\u003cp\u003eGitHub allows you to classify your repositories using \u003ca href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/classifying-your-repository-with-topics"\u003eTopics\u003c/a\u003e. Using this key you can configure a task to run on all repos that have been classified with a topic. For example, you may want to run \u003ca href="/docs/tasks/cq/pylint"\u003ePylint\u003c/a\u003e on all repos with the topic \u003ccode\u003eapi\u003c/code\u003e.\u003c/p\u003e\n\u003ch5 id="example"\u003eExample\u003c/h5\u003e\n\u003cp\u003eHere is an example configuration that demonstrates each way the \u003ca href="/docs/tasks/workflow/title-lint"\u003eTitle Lint\u003c/a\u003e task can be configured to run on a repo:\u003c/p\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003eðŸ‘‰\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eIf a repo matches \u003cb\u003eany\u003c/b\u003e condition the task will run.\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003etitle-lint:\n  installation:\n    # Run title lint on every repo the GitHub Application is installed on\n    org: true\n    # Run title lint on the following specific repositories\n    repos:\n      - foo\n      - bar\n    # Run title lint on repos with the following languages (as determined by GitHub)\n    repo_languages:\n      - Python\n      - JavaScript\n      - HCL\n    # Run title lint on repos with these topics\n    repo_topics:\n      - api\n      - web\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="task-settings"\u003eTask Settings\u003c/h4\u003e\n\u003cp\u003eIn addition to configuring which repos a task will run on, you can provide settings for tasks that are configurable.\u003c/p\u003e\n\u003cp\u003eAs an example, the Title Lint task will check Pull Request titles to ensure they match a defined pattern which is provided by the \u003ccode\u003eregex\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch5 id="globally"\u003eGlobally\u003c/h5\u003e\n\u003cp\u003eYou can globally configure a task settings by using the \u003ccode\u003eorg\u003c/code\u003e key under settings. Within \u003ccode\u003eorg\u003c/code\u003e you can use \u003ccode\u003efinal\u003c/code\u003e to indicate settings that \u003cstrong\u003ecannot\u003c/strong\u003e be overridden or \u003ccode\u003edefault\u003c/code\u003e which will be used if no other settings are provided.\u003c/p\u003e\n\u003ch5 id="repo-languages-1"\u003eRepo Languages\u003c/h5\u003e\n\u003cp\u003eYou can configure a task based on the language contained in the repo, as determined by GitHub. The language setting of the predominent language in the repo will be used. If you wish to change this behavior you can provide a \u003ccode\u003epriority\u003c/code\u003e value and the highest priority settings will take precedence.\u003c/p\u003e\n\u003ch5 id="repo-topics-1"\u003eRepo Topics\u003c/h5\u003e\n\u003cp\u003eSimilar to repo languages, you can provide settings based on repo topics. If a repo has more than one topic which matches multiple different settings the \u003ccode\u003epriority\u003c/code\u003e will be used to determine precedence. If no \u003ccode\u003epriority\u003c/code\u003e is provided the final settings will be determined in a non-deterministic way.\u003c/p\u003e\n\u003ch5 id="repo-name"\u003eRepo Name\u003c/h5\u003e\n\u003cp\u003eLastly, you can provide settings for a specific repo.\u003c/p\u003e\n\u003ch5 id="determining-final-settings"\u003eDetermining Final Settings\u003c/h5\u003e\n\u003cp\u003eSettings will be applied in the following order, with those coming later having higher precedence:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGlobal Default\u003c/li\u003e\n\u003cli\u003eRepo Languages\u003c/li\u003e\n\u003cli\u003eRepo Topics\u003c/li\u003e\n\u003cli\u003eRepo Name\u003c/li\u003e\n\u003cli\u003eGlobal Final\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id="example-1"\u003eExample\u003c/h5\u003e\n\u003cp\u003eHere are the different ways to configure a task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003etitle-lint:\n  settings:\n    org:\n      # Enforced standard for the entire orginization that cannot be overridden\n      final:\n        regex: \u0026quot;[A-Z]+-[0-9]+\u0026quot;\n      # Default value for organization.\n      # Can be overridden by repo specific settings.\n      default:\n        regex: \u0026quot;[A-Z]+-[0-9]+\u0026quot;\n  repo_languages:\n    JavaScript:\n      regex: \u0026quot;(feat|fix): .*\u0026quot;\n  repo_topics:\n    web:\n      regex: \u0026quot;(foo|bar): .*\u0026quot;\n      priority: 30\n    api:\n      regex: \u0026quot;(bar|baz): .*\u0026quot;\n      priority: 20\n  # Repo specific settings\n  repos:\n    - web-tool-repo:\n        regex: \u0026quot;[A-Z]+-[0-9]+\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:2,href:"/docs/getting-started/migration/",title:"Migration",description:"Githaxs is a CI as a Service platform.",content:'\u003ch2 id="how-do-i-migrate"\u003eHow do I Migrate?\u003c/h2\u003e\n\u003cp\u003eMigrating to Githaxs is \u003cstrong\u003ea lot\u003c/strong\u003e easier than migrating between other CI/CD providers. When migrating to Githaxs there is no need to translate between Jenkins and CircleCI syntax.\u003c/p\u003e\n\u003cp\u003eHere is the three step process:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eInstall Githaxs Application.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate githaxs_settings/ghx.yml configuration file.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDelete CI tasks from your current CI tooling (optional)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:3,href:"/docs/getting-started/security/",title:"Security",description:"Githaxs is a CI as a Service platform.",content:'\u003ch2 id="our-practices"\u003eOur Practices\u003c/h2\u003e\n\u003ch3 id="secure-webhooks"\u003eSecure Webhooks\u003c/h3\u003e\n\u003cp\u003eTo limit the requests our platform receives we have followed the guide GitHub offers for \u003ca href="https://docs.github.com/en/developers/webhooks-and-events/securing-your-webhooks"\u003eSecuring your webhooks\u003c/a\u003e. We validate the signature of every request and reject the requests which have not been signed with a secret token.\u003c/p\u003e\n\u003ch3 id="data-protection"\u003eData Protection\u003c/h3\u003e\n\u003cp\u003eTo ensure the protection of your data we ensure all data is encrypted at rest and in transit. Additionally, any tasks which clone GitHub repositories store the cloned repo in ephemeral storage and explicitly delete the repository as an extra precaution after the task has completed.\u003c/p\u003e\n\u003ch3 id="access-controls"\u003eAccess Controls\u003c/h3\u003e\n\u003cp\u003eOur platform is hosted on AWS and we follow the \u003ca href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"\u003eAWS Best Practices\u003c/a\u003e to prevent any unauthorized access to our platform. Access to our production environment is strictly limited and controlled.\u003c/p\u003e\n\u003ch3 id="github-tokens"\u003eGitHub Tokens\u003c/h3\u003e\n\u003cp\u003eGitHub applications generate tokens which allow the application to perform actions using the GitHub API. The tokens our applications generate are never stored and are set to expire after ten minutes.\u003c/p\u003e\n'},{id:4,href:"/docs/tasks/workflow/code-freeze/",title:"Code Freeze",description:"Githaxs | Code Freeze",content:'\u003chr\u003e\n\u003cp\u003eAllows you to prevent deployents during sensitive times/days of the year.\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;re an e-commerce company you may want to restrict deployments just before Black Friday or your biggest sales day of the year. Perhaps you want a relaxing holiday for your employees over Christmas and New Years. Maybe you don\u0026rsquo;t want to deploy on weekends. Whatever the case may be, you can enforce these restrictions with this task.\u003c/p\u003e\n\u003cp\u003eThe task also has a \u0026ldquo;break glass\u0026rdquo; feature in the event you need to urgently deploy a hot fix. When a user overrides the failing check the task will comment on the status check indicating who had to deploy.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eparameter\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003cth\u003erequired\u003c/th\u003e\n\u003cth\u003edefault\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eblock_times\u003c/td\u003e\n\u003ctd\u003eA \u003cstrong\u003elist\u003c/strong\u003e of \u003ca href="https://crontab.pro/"\u003eCRON expressions\u003c/a\u003e indicating when pull requests should not be merged. Note that times are in \u003cstrong\u003eUTC\u003c/strong\u003e.\u003c/td\u003e\n\u003ctd\u003eyes\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="example-configuration"\u003eExample Configuration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# \u0026lt;repo name\u0026gt;/ghx.yml\n\ncode-freeze:\n  settings:\n    org:\n      final:\n        block_times:\n        # Block merges on Saturday and Sunday\n          - \u0026quot;* * * * 6,0\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="actions"\u003eActions\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eoverride\u003c/td\u003e\n\u003ctd\u003eManually override a failing check to passing. The task will post a comment on GitHub indicating which user has overridden the result and allow deployment of code.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:5,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:'\u003ch2 id="how-long-does-it-take-for-my-subscription-to-become-active"\u003eHow long does it take for my subscription to become active?\u003c/h2\u003e\n\u003cp\u003eDuring our Beta phase we are onboarding users manually. We ensure all users are onboarded within 24 hours of signing up.\u003c/p\u003e\n\u003ch2 id="is-githaxs-free-for-open-source-projects"\u003eIs Githaxs free for Open Source projects?\u003c/h2\u003e\n\u003cp\u003eOpen Source projects have access to our Free subscription. We currently do not provide all features to Open Source projects.\u003c/p\u003e\n\u003ch2 id="how-do-i-cancel-my-subscription"\u003eHow do I cancel my subscription?\u003c/h2\u003e\n\u003cp\u003ePlease send an email to \u003ccode\u003esubscriptions@githaxs.com\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id="have-a-question"\u003eHave a question?\u003c/h2\u003e\n\u003cp\u003ePlease send an email to \u003ccode\u003ehello@githaxs.com\u003c/code\u003e.\u003c/p\u003e\n'},{id:6,href:"/docs/tasks/cq/hadolint/",title:"Hadolint",description:"Hadolint | Content Application",content:'\u003chr\u003e\n\u003cp\u003e\u003ca href="https://github.com/hadolint/hadolint"\u003eHadolint\u003c/a\u003e helps you build Docker images that follow\n\u003ca href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"\u003eBest Practices\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id="example-configuration"\u003eExample Configuration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nhadolint:\n  installation:\n    org: true\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:7,href:"/docs/tasks/workflow/pr-too-big/",title:"PR Too Big",description:"Githaxs | PR Too Big",content:'\u003chr\u003e\n\u003cp\u003e\u003ca href="https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests"\u003eAtlassian\u003c/a\u003e, \u003ca href="https://smallbusinessprogramming.com/optimal-pull-request-size/"\u003eSmall Business Programming\u003c/a\u003e, and \u003ca href="https://cloud.google.com/architecture/devops/devops-process-working-in-small-batches"\u003eGoogle\u003c/a\u003e have made the case for using small pull requests to improve team efficiency and reduce errors.\u003c/p\u003e\n\u003cp\u003ePR Too Big will programatically enforce keeping pull requests small while also providing an override feature.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eparameter\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003cth\u003erequired\u003c/th\u003e\n\u003cth\u003edefault\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003emax_changed_files\u003c/td\u003e\n\u003ctd\u003eThe maximum number of changed files in a pull request\u003c/td\u003e\n\u003ctd\u003eno\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emax_additions\u003c/td\u003e\n\u003ctd\u003eThe maximum number of additions in a pull request as calculated by GitHub\u003c/td\u003e\n\u003ctd\u003eno\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emax_deletions\u003c/td\u003e\n\u003ctd\u003eThe maximum number of deletions in a pull request as calculated by GitHub\u003c/td\u003e\n\u003ctd\u003eno\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="example-configuration"\u003eExample Configuration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\npr-too-big:\n  settings:\n    org:\n      default:\n        max_changed_files: 20\n        max_additions: 200\n        max_deletions: 200\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:8,href:"/docs/tasks/cq/prettier/",title:"Prettier",description:"Prettier | Content Application",content:'\u003chr\u003e\n\u003cp\u003e\u003ca href="https://prettier.io/"\u003ePrettier\u003c/a\u003e is an opinionated code formatter\ncreated to reduce time spent deliberating over which style conventions\nto use.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/githaxs/prettier"\u003ePrettier Task\u003c/a\u003e ensures files are formatted properly.\nNow you can run Prettier on all of your Organizations repos with three lines of configuration.\u003c/p\u003e\n\u003ch3 id="details"\u003eDetails\u003c/h3\u003e\n\u003ch5 id="file-extensions"\u003eFile Extensions\u003c/h5\u003e\n\u003cp\u003eThe Prettier task will only run on files that end with the following extensions: js, ts, scss, css, yaml, yml, html, jsx.\u003c/p\u003e\n\u003ch5 id="files-in-scope"\u003eFiles in Scope\u003c/h5\u003e\n\u003cp\u003eThe Prettier task does \u003cstrong\u003enot scan the entire repository\u003c/strong\u003e, it only scans the files that have \u003cstrong\u003echanged\u003c/strong\u003e in a Pull Request.\u003c/p\u003e\n\u003cp\u003eThis decision was made to support legacy code bases and use incermental improvements rather than causing the first Pull Request\nto fail with hundreds of files needing to be reformatted.\u003c/p\u003e\n\u003cp\u003eIf an entire repo needs to be reformatted it is best to do so manually either before or after installing the Prettier Task.\u003c/p\u003e\n\u003ch5 id="auto-fix"\u003eAuto Fix\u003c/h5\u003e\n\u003cp\u003eOne of the more annoying aspects of a failed linting check is having to context switch and push a commit to address the failure.\nWith the Githaxs Prettier Task it becomes easy.\u003c/p\u003e\n\u003cp\u003eIf the check fails there will be a \u003ccode\u003eFix\u003c/code\u003e button in the Check Run status. Simply click the button and the Task will fix any formatting\nchanges and add a commit onto the Pull Request.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/prettier-fix.png" alt=""\u003e\u003c/p\u003e\n\u003cp\u003eYou can also configure the task to automatically fix any formatting issues, without needing to even press a button, by setting the \u003ccode\u003eauto_fix\u003c/code\u003e option to true, see below for examples.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eparameter\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003cth\u003erequired\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eprettier_config\u003c/td\u003e\n\u003ctd\u003eA map of \u003ca href="https://prettier.io/docs/en/options.html"\u003eprettier options\u003c/a\u003e.\u003c/td\u003e\n\u003ctd\u003eTrue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eauto_fix\u003c/td\u003e\n\u003ctd\u003eA boolean to indicate if you want the Prettier Task to automatically fix any formatting issues.\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="example-configurations"\u003eExample Configurations\u003c/h3\u003e\n\u003ch6 id="install-and-automatically-fix-on-all-repos"\u003eInstall and Automatically fix on all Repos\u003c/h6\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nprettier:\n  installation:\n    org: true\n  settings:\n    org:\n      final:\n        auto_fix: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6 id="specify-defaults-and-specify-overrides-for-a-repo"\u003eSpecify defaults and specify overrides for a repo\u003c/h6\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nprettier:\n  installation:\n    org: true\n  settings:\n    org:\n      default:\n        prettier_config:\n          singleQuote: true\n          semi: false\n    repos:\n      - web:\n          prettier_config:\n            singleQuote: false\n            semi: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6 id="specify-defaults-and-specify-overrides-by-repo-topic"\u003eSpecify defaults and specify overrides by repo topic\u003c/h6\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nprettier:\n  installation:\n    org: true\n  settings:\n    org:\n      default:\n        prettier_config:\n          singleQuote: true\n          semi: false\n    repo_topics:\n      web:\n        prettier_config:\n          singleQuote: false\n          semi: true\n\n      api:\n        prettier_config:\n          singleQuote: false\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="bugsfeature-requests"\u003eBugs/Feature Requests\u003c/h3\u003e\n\u003cp\u003eNoticed a problem with this task or would like a new feature? Please \u003ca href="https://github.com/githaxs/prettier/issues"\u003eSubmit an Issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePull Requests are also accepted ðŸ˜„\u003c/p\u003e\n'},{id:9,href:"/docs/tasks/cq/pylint/",title:"Pylint",description:"Pylint | Content Application",content:'\u003chr\u003e\n\u003cp\u003e\u003ca href="https://pylint.org"\u003ePylint\u003c/a\u003e enforces the PEP8 style guide and detects errors\nin your Python code.\u003c/p\u003e\n\u003ch3 id="details"\u003eDetails\u003c/h3\u003e\n\u003ch5 id="files-scanned"\u003eFiles Scanned\u003c/h5\u003e\n\u003cp\u003eFiles that end in \u003ccode\u003e.py\u003c/code\u003e and that have been changed in a Pull Request will be scanned. This task \u003cstrong\u003edoes not\u003c/strong\u003e scan the entire repo.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003cp\u003eThe task does not support any custom configuration except for installing\u003c/p\u003e\n\u003ch3 id="example-configuration"\u003eExample Configuration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\npylint:\n  installation:\n    org: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="bugsfeature-requests"\u003eBugs/Feature Requests\u003c/h3\u003e\n\u003cp\u003eNoticed a problem with this task or would like a new feature? Please \u003ca href="https://github.com/githaxs/pylint/issues"\u003eSubmit an Issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePull Requests are also accepted ðŸ˜„\u003c/p\u003e\n'},{id:10,href:"/docs/tasks/cq/shellcheck/",title:"ShellCheck",description:"Githaxs | ShellCheck",content:'\u003chr\u003e\n\u003cp\u003e\u003ca href="https://shellcheck.net"\u003eShellCheck\u003c/a\u003e finds bugs in your shell scripts.\ntests.\u003c/p\u003e\n\u003ch3 id="details"\u003eDetails\u003c/h3\u003e\n\u003ch5 id="file-extensions"\u003eFile Extensions\u003c/h5\u003e\n\u003cp\u003eShellCheck will only run on files that end with \u003ccode\u003e.sh\u003c/code\u003e.\u003c/p\u003e\n\u003ch5 id="files-in-scope"\u003eFiles in Scope\u003c/h5\u003e\n\u003cp\u003eOnly files that have \u003cstrong\u003echanged\u003c/strong\u003e in a Pull Request will be analyzed by this task.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003cp\u003eThere are currently \u003cstrong\u003eno\u003c/strong\u003e configuration options for ShellCheck other than to install it.\u003c/p\u003e\n\u003ch5 id="example-configuration"\u003eExample Configuration\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nshellcheck:\n  installation:\n    org: true\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:11,href:"/docs/tasks/cq/tf-fmt/",title:"Terraform Format",description:"Terraform Format | Content Application",content:'\u003chr\u003e\n\u003cp\u003eTerraform Format is built into the Terraform binary and has an opinionated\nconvention for how files should be formatted.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href="https://github.com/githaxs/terraform-fmt"\u003eTerraform Format Task\u003c/a\u003e ensures files are formatted properly.\u003c/p\u003e\n\u003ch3 id="details"\u003eDetails\u003c/h3\u003e\n\u003ch5 id="file-extensions"\u003eFile Extensions\u003c/h5\u003e\n\u003cp\u003eThe task will only run on files that end with \u003ccode\u003e.tf\u003c/code\u003e and \u003ccode\u003e.tfvars\u003c/code\u003e\u003c/p\u003e\n\u003ch5 id="files-in-scope"\u003eFiles in Scope\u003c/h5\u003e\n\u003cp\u003eThe Terraform Format task does \u003cstrong\u003enot scan the entire repository\u003c/strong\u003e, it only scans the files that have \u003cstrong\u003echanged\u003c/strong\u003e in a Pull Request.\u003c/p\u003e\n\u003cp\u003eThis decision was made to support legacy code bases and use incermental improvements rather than causing the first Pull Request to fail with hundreds of files needing to be reformatted.\u003c/p\u003e\n\u003cp\u003eIf an entire repo needs to be reformatted it is best to do so manually either before or after installing the Prettier Task.\u003c/p\u003e\n\u003ch5 id="auto-fix"\u003eAuto Fix\u003c/h5\u003e\n\u003cp\u003eOne of the more annoying aspects of a failed linting check is having to context switch and push a commit to address the failure.\nWith the Githaxs it becomes easy.\u003c/p\u003e\n\u003cp\u003eIf the check fails there will be a \u003ccode\u003eFix\u003c/code\u003e button in the Check Run status. Simply click the button and the Task will fix any formatting\nchanges and add a commit onto the Pull Request.\u003c/p\u003e\n\u003cp\u003eYou can also configure the task to automatically fix any formatting issues, without needing to even press a button, by setting the \u003ccode\u003eauto_fix\u003c/code\u003e option to true, see below for examples.\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eparameter\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003cth\u003erequired\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eauto_fix\u003c/td\u003e\n\u003ctd\u003eA boolean to indicate if you want the Prettier Task to automatically fix any formatting issues.\u003c/td\u003e\n\u003ctd\u003eFalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="example-configurations"\u003eExample Configurations\u003c/h3\u003e\n\u003ch6 id="install-and-automatically-fix-on-all-repos"\u003eInstall and Automatically fix on all Repos\u003c/h6\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\nprettier:\n  installation:\n    org: true\n  settings:\n    org:\n      final:\n        auto_fix: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="bugsfeature-requests"\u003eBugs/Feature Requests\u003c/h3\u003e\n\u003cp\u003eNoticed a problem with this task or would like a new feature? Please \u003ca href="https://github.com/githaxs/terraform-fmt/issues"\u003eSubmit an Issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePull Requests are also accepted ðŸ˜„\u003c/p\u003e\n'},{id:12,href:"/docs/tasks/workflow/title-lint/",title:"Title Lint",description:"Githaxs | Title Lint",content:'\u003chr\u003e\n\u003cp\u003eTitle Lint ensures all Pull Request titles follow a similar pattern.\u003c/p\u003e\n\u003cp\u003eThis application is useful if you follow standards such as conventional commit or as part of your change managegment process to ensure Pull Requests are linked back to your work management tool (i.e. Jira).\u003c/p\u003e\n\u003ch3 id="configuration"\u003eConfiguration\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eparameter\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003cth\u003erequired\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eregex\u003c/td\u003e\n\u003ctd\u003eThe regular expression to test Pull Request titles agains\u003c/td\u003e\n\u003ctd\u003eyes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eexclude_users\u003c/td\u003e\n\u003ctd\u003eA list of users to exclude from checking Pull Request Titles (i.e. dependabot)\u003c/td\u003e\n\u003ctd\u003eno\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="example-configuration"\u003eExample Configuration\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e# githaxs_settings/ghx.yml\n\ntitle-lint:\n  org: true\n  settings:\n    org:\n      # Cannot be overriden by repo specific settings\n      final:\n        regex: \u0026quot;[A-Z]+-[0-9]+\u0026quot;\n        exclude_users:\n          - dependabot\n      # Default value if repo specific settings do not exist\n      default:\n        regex: \u0026quot;[A-Z]+-[0-9]+\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:13,href:"/docs/help/",title:"Help",description:"",content:""},{id:14,href:"/docs/tasks/",title:"Tasks",description:"Documentation for Githaxs Tasks.",content:""},{id:15,href:"/docs/getting-started/",title:"Getting Started",description:"Githaxs | Getting Started",content:""},{id:16,href:"/docs/",title:"Githaxs",description:"Githaxs Docs.",content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()